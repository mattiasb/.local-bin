#!/bin/bash

PREFIX=~/.local

GH_USERNAME=moonlite

function mkcd {
    if [ ! -e "${1}" ]; then
        mkdir -p "${1}"
    fi
    cd "${1}"
}

function git-clone {
    local url="${1}"
    local dir="${2}"

    if [ -z "${dir}" ]; then
        dir="${HOME}/Code/Other/${repo}/"
    fi

    mkcd "${dir}"

    if [ ! -d .git ]; then
        git clone "${url}" .
    else
        git pull origin master
    fi

    if [ -f .gitmodules ]; then
        git submodule update --init --remote
    fi
}

function gh-clone {
    local org="${1}"
    local repo="${2}"
    local dir="${3}"
    local url="https://github.com/${org}/${repo}.git"

    if [ -z "${dir}" ]; then
        dir="${HOME}/Code/github/${org}/${repo}/"
    fi

    git-clone "${url}" "${dir}"
}

function clone-config-dir {
    gh-clone "${GH_USERNAME}" "${1}" "${HOME}/${1}"
}

function safe-link {
    if [ -h "${2}" ]; then
	rm "${2}"
    elif [ -e "${2}" ]; then
        mv "${2}" "${2}.bak.$(date -Is)"
    fi

    echo -e "${1}\t â‡’ ${2}"
    ln -s "${1}" "${2}"
}

function safe-link-bin {
    local bin;
    local target;

    if [ -z "${2}" ]; then
	bin=`basename "${1}"`
    else
	bin="${2}"
    fi
    target="${HOME}/.local/bin/$bin"

    safe-link "${1}" "${target}"
    chmod +x "${target}"
}


#################
# Initial Setup #
#################

function setup-rpmfusion {
    if [ -f /etc/yum.repos.d/rpmfusion-free.repo ] && [ -f /etc/yum.repos.d/rpmfusion-nonfree.repo ]; then
        echo "RPM Fusion already set up..."
    else
        echo "Setting up RPM Fusion..."
        echo
        sudo su -c 'dnf install --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm'

        echo "RPMFusion set up"
    fi

    echo
    echo
}

function setup-packages {
    echo "Installing packages..."
    echo

    PACKAGES="                          \
        bijiben                         \
        cabal-install                   \
        california                      \
        clang-devel                     \
        cmake                           \
        corebird                        \
        docbook-dtds                    \
        docbook-style-xsl               \
        docker-io                       \
        emacs                           \
        epiphany                        \
        fedup                           \
        gimp                            \
        git                             \
        git-bz                          \
        gitflow                         \
        gitg                            \
        glade                           \
        gnome-calendar                  \
        gnome-common                    \
        gnome-maps                      \
        gnome-photos                    \
        gnome-tweak-tool                \
        golang                          \
        golang-godoc                    \
        gperf                           \
        gstreamer1-libav                \
        gstreamer1-plugins-bad          \
        gstreamer1-plugins-bad-freeworld\
        gstreamer1-plugins-ugly         \
        gstreamer1-vaapi                \
        gtk3-devel-docs                 \
        intltool                        \
        lua-devel                       \
        lua-filesystem                  \
        luarocks                        \
        llvm-devel                      \
        llvm-static                     \
        meld                            \
        mercurial                       \
        npm                             \
        nautilus-open-terminal          \
        ncurses-devel                   \
        nuntius                         \
        pandoc                          \
        perl-open                       \
        python-pip                      \
        rpmdevtools                     \
        rpmlint                         \
        tig                             \
        transmission-remote-gtk         \
        tmux                            \
        yelp-tools                      \
    "
    sudo su -c "echo $PACKAGES | xargs dnf install -y"

    echo "Packages installed..."
    echo
    echo
}

function setup-chrome {
    if [ `command -v google-chrome` ]; then
        echo "Google Chrome already installed..."
    else
        echo "Installing Google Chrome..."
        echo
        sudo su -c 'dnf install --nogpgcheck https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm'
        echo "Google Chrome installed..."
    fi

    echo
    echo
}

function setup-config {
    echo "Setting up configs..."
    clone-config-dir ".config"

    safe-link "${HOME}/.config/bash/rc"      "${HOME}/.bashrc"
    safe-link "${HOME}/.config/bash/profile" "${HOME}/.bash_profile"
    safe-link "${HOME}/.config/bash/logout"  "${HOME}/.bash_logout"

    source ~/.bashrc

    echo "Config setup done..."
    echo
    echo
}

function setup-rpmdev {
    echo "Setting up rpmdev..."
    safe-link "${HOME}/.config/rpm/macros" "${HOME}/.rpmmacros"
    rpmdev-setuptree

    echo
    echo
}

function setup-emacs {
    echo "Setting up Emacs..."
    echo

    rm ~/.emacs 2> /dev/null
    clone-config-dir ".emacs.d"
    pushd "${HOME}/.emacs.d/" >/dev/null &&
        make                             &&
        popd >/dev/null

    echo "Emacs setup done..."
    echo
    echo
}

function setup-jhbuild {
    echo "Setting up JHBuild paths..."
    echo

    if [ ! -d /opt/gnome ]; then
        echo "Setting up install dir [/opt/gnome]..."
        echo

        sudo mkdir -m 0775 -p /opt/gnome
        sudo chown root:wheel /opt/gnome
    fi

    if [ ! -d "${HOME}/Code/gnome" ]; then
        echo "Setting up checkout dir [${HOME}/Code/gnome]..."
        echo

        mkdir -p "${HOME}/Code/gnome"
    fi

    echo "JHBuild setup done..."
    echo
    echo
}



####################
# Install / Update #
####################

function update-npm-packages {
    echo "Updating NPM packages..."
    echo

    npm install -g                      \
        grunt-cli                       \
        jshint                          \
        jscs                            \
        jake                            \
        http-server                     \
        editorconfig                    \
        yasel                           \
        2> /dev/null

    echo
    echo "npm packages updated..."
    echo
    echo
}

function update-lua-packages {
    echo "Updating Lua packages..."
    echo

    luarocks install luacheck

    echo
    echo "Lua packages updated..."
    echo
    echo
}

function update-python-packages {
    echo "Updating Python packages..."
    echo

    pip install --upgrade --user git-spindle

    echo
    echo "Python packages updated..."
    echo
    echo
}

function update-go-packages {
    echo "Updating go packages..."
    echo

    go get github.com/nsf/gocode
    go get github.com/dougm/goflymake
    go get code.google.com/p/rog-go/exp/cmd/godef
    go get github.com/monochromegane/the_platinum_searcher/...

    echo
    echo "go packages updated..."
    echo
    echo
}

function update-emacs {
    echo "Updating Emacs..."
    echo

    pushd "${HOME}/.emacs.d/" >/dev/null &&
        make update                      &&
        popd

    echo
    echo "Emacs updated..."
    echo
    echo
}

function update-git-fpaste {
    echo "Updating git-fpaste..."
    echo

    gh-clone "moonlite" "git-fpaste" "${HOME}/Code/Projects/git-fpaste/" && make user-install

    echo
    echo "git-fpaste updated..."
    echo
    echo
}

function update-bash-completions {
    local COMP_PATH="${PREFIX}/share/bash-completion/completions/"

    echo "Updating bash completion..."
    echo

    gh-clone "ekalinin" "pip-bash-completion" &&
        cp pip "${COMP_PATH}" &&
        cd

    [ `command -v npm` ] && npm completion > "${COMP_PATH}/npm"

    echo
    echo "bash completions updated..."
    echo
    echo
}

function update-jhbuild {
    echo "Updating JHBuild..."
    git-clone https://git.gnome.org/browse/jhbuild "${HOME}/Code/gnome/jhbuild"
    ./autogen.sh --prefix="$PREFIX/" && make && make install
    echo
    echo "Updating JHBuild sysdeps..."
    jhbuild sysdeps --install
    echo
    echo "JHBuild updated..."

    echo
    echo
}

function update-spotify {
    local FORCE_UPDATE="${1}"
    if [ `command -v spotify` ] && [ -z "${FORCE_UPDATE}" ]; then
        echo "Spotify already installed. Skipping..."
    else
        echo "Updating Spotify..."
        echo

        gh-clone "leamas" "spotify-make"
        ./configure --prefix="${PREFIX}/"
        make download
        make install
        make register
        echo
        echo "Spotify updated..."
    fi

    echo
    echo
}

function update-rtags {
    local FORCE_UPDATE="${1}"
    if [ `command -v rdm` ] && [ -z "${FORCE_UPDATE}" ]; then
        echo "RTags already installed. Skipping..."
    else
        echo "Building RTags..."
        echo

        gh-clone "Andersbakken" "rtags"
        mkcd build
        cmake -DCMAKE_INSTALL_PREFIX:PATH="${PREFIX}/" .. && \
            make -j $(nproc)                              && \
            make install
        cd "${HOME}"
        if [ ! -x "${HOME}/.local/bin/gcc-rtags-wrapper.sh" ]; then
            echo "Installing GCC wrapper symlinks..."
            install -m 755 "${HOME}/Code/github/rtags/bin/gcc-rtags-wrapper.sh" ~/.local/bin/
            for COMP in `echo -e "gcc\nc++\ncc\ng++"`; do
                safe-link-bin "${HOME}/.local/bin/gcc-rtags-wrapper.sh" "$COMP";
            done
        fi
        echo
        echo "RTags updated..."
    fi

    echo
    echo
}

function update-rust {
    local FORCE_UPDATE="${1}"
    if [ `command -v rustc` ] && [ -z "${FORCE_UPDATE}" ]; then
        echo "Rust already installed..."
    else
        echo "Updating Rust..."
        echo

        local SPEC="rust-binary.spec"
        local URL="https://raw.githubusercontent.com/cgwalters/playground/master/rust/${SPEC}"

        pushd ~/Code/Fedora/rpmbuild/ >/dev/null       	&& \
            curl "${URL}" -o "SPECS/${SPEC}"		&& \
            spectool  -g -R  "SPECS/${SPEC}"		&& \
            rpmbuild  -ba    "SPECS/${SPEC}"		&& \
            sudo dnf install -y RPMS/x86_64/rust*
        popd >/dev/null
        echo
        echo "Rust updated..."
    fi

    echo
    echo
}

function update-racer {
    local FORCE_UPDATE="${1}"
    if [ `command -v racer` ] && [ -z "${FORCE_UPDATE}" ]; then
        echo "Racer already installed..."
    else
        echo "Updating Racer..."
        echo

        gh-clone "rust-lang" "rust"         && \
            gh-clone "phildawes" "racer"    && \
            cargo build --release           && \
            install -m 755 target/release/racer "${PREFIX}/bin/"
        echo
        echo "Racer updated..."
    fi

    echo
    echo
}

############
# Commands #
############

function init {
    setup-rpmfusion
    setup-packages
    setup-chrome
    setup-config
    setup-rpmdev
    setup-emacs
    setup-jhbuild
    echo
    echo "Initialization done!"
}

function update-all {
    local force="${1}"

    update-npm-packages            "${force}"
    update-lua-packages            "${force}"
    update-python-packages         "${force}"
    update-go-packages             "${force}"
    update-git-fpaste              "${force}"
    update-bash-completions        "${force}"
    update-emacs                   "${force}"
    update-jhbuild                 "${force}"
    update-spotify                 "${force}"
    update-rtags                   "${force}"
    update-rust                    "${force}"
    update-racer                   "${force}"
}

function update-some {
    local arg
    while [[ $# > 0 ]] ; do
        arg="${1}"
        shift
        case "${arg}" in
            npm-packages)            update-npm-packages            "yes" ;;
            lua-packages)            update-lua-packages            "yes" ;;
            python-packages)         update-python-packages         "yes" ;;
            go-packages)             update-go-packages             "yes" ;;
            git-fpaste)              update-git-fpaste              "yes" ;;
            bash-completions)        update-bash-completions        "yes" ;;
            emacs)                   update-emacs                   "yes" ;;
            jhbuild)                 update-jhbuild                 "yes" ;;
            spotify)                 update-spotify                 "yes" ;;
            rtags)                   update-rtags                   "yes" ;;
            rust)                    update-rust                    "yes" ;;
            racer)                   update-racer                   "yes" ;;
        esac
    done
}

function update {
    if [[ $# == 0 ]]; then
        update-all
    elif [[ $# == 1 ]] && [[ "${1}" == "--all" ]]; then
        update-all "yes"
    else
        update-some "$@"
    fi
}

cmd="${1}"
shift

case "${cmd}" in
    init)    init           ;;
    update)  update "$@"    ;;
    install) init && update ;;
esac
