#!/bin/bash

#############
# Variables #
#############

PREFIX=~/.local
CONFIG=~/.config

GH_USERNAME=mattiasb

PACKAGES="bijiben                                                       \
          cabal-install                                                 \
          clang-devel                                                   \
          cmake                                                         \
          ctags-etags                                                   \
          corebird                                                      \
          docbook-dtds                                                  \
          docbook-style-xsl                                             \
          docker-io                                                     \
          emacs                                                         \
          epiphany                                                      \
          feedreader                                                    \
          gimp                                                          \
          git                                                           \
          git-bz                                                        \
          gitflow                                                       \
          gitg                                                          \
          glade                                                         \
          gnome-calendar                                                \
          gnome-common                                                  \
          gnome-maps                                                    \
          gnome-photos                                                  \
          gnome-tweak-tool                                              \
          golang                                                        \
          golang-godoc                                                  \
          gperf                                                         \
          gstreamer1-libav                                              \
          gstreamer1-plugins-bad-freeworld                              \
          gstreamer1-plugins-ugly                                       \
          gstreamer1-vaapi                                              \
          gtk3-devel-docs                                               \
          hunspell-sv                                                   \
          intltool                                                      \
          lua-devel                                                     \
          lua-filesystem                                                \
          luarocks                                                      \
          llvm-devel                                                    \
          llvm-static                                                   \
          meld                                                          \
          mercurial                                                     \
          maven                                                         \
          npm                                                           \
          nautilus-open-terminal                                        \
          ncurses-devel                                                 \
          nuntius                                                       \
          p7zip-plugins                                                 \
          pandoc                                                        \
          perl-open                                                     \
          pylint                                                        \
          python-pip                                                    \
          python-rope                                                   \
          python-ipython                                                \
          python-jedi                                                   \
          python-flake8                                                 \
          python-importmagic                                            \
          python-autopep8                                               \
          remmina                                                       \
          remmina-plugins-gnome                                         \
          remmina-plugins-rdp                                           \
          remmina-plugins-vnc                                           \
          remmina                                                       \
          rpmdevtools                                                   \
          rpmlint                                                       \
          ruby                                                          \
          ruby-irb                                                      \
          rust-binary                                                   \
          ShellCheck                                                    \
          spotify-client                                                \
          tig                                                           \
          transmission-remote-gtk                                       \
          tmux                                                          \
          yelp-tools                                                    \
                                                                        "

###########
# Helpers #
###########

function mkcd {
    if [ ! -e "${1}" ]; then
        mkdir -p "${1}"
    fi
    cd "${1}"
}

function git-clone {
    local url="${1}"
    local dir="${2}"

    if [ -z "${dir}" ]; then
        dir="${HOME}/Code/Other/${repo}/"
    fi

    mkcd "${dir}"

    if [ -d .git ]; then
        git pull origin master
    else
        git init
        git remote add origin "${url}"
        git fetch origin
        git checkout -b master --track origin/master
    fi

    if [ -f .gitmodules ]; then
        git submodule update --init --remote
    fi
}

function gh-clone {
    local org="${1}"
    local repo="${2}"
    local dir="${3}"
    local url="https://github.com/${org}/${repo}.git"

    if [ -z "${dir}" ]; then
        dir="${HOME}/Code/github/${org}/${repo}/"
    fi

    git-clone "${url}" "${dir}"
}

function clone-config-dir {
    gh-clone "${GH_USERNAME}" "${1}" "${HOME}/${1}"
}

function safe-link {
    if [ -h "${2}" ]; then
	rm "${2}"
    elif [ -e "${2}" ]; then
        mv "${2}" "${2}.bak.$(date -Is)"
    fi

    echo -e "${1}\t â‡’ ${2}"
    ln -s "${1}" "${2}"
}

function safe-link-bin {
    local bin;
    local target;

    if [ -z "${2}" ]; then
        bin=$(basename "${1}")
    else
	bin="${2}"
    fi
    target="${HOME}/.local/bin/$bin"

    safe-link "${1}" "${target}"
    chmod +x "${target}"
}

_last_setup=""
function begin-setup {
    _last_setup="${1}"
    echo "Setting up ${_last_setup}..."
    echo
}

function end-setup {
    echo "${_last_setup} setup done..."
    echo
    echo
}

_last_update=""
function begin-update {
    _last_update="${1}"
    echo "Updating ${_last_update}..."
    echo
}

function end-update {
    echo "${_last_update} updated..."
    echo
    echo
}

#################
# Initial Setup #
#################

function setup-rpmfusion {
    if [ -f /etc/yum.repos.d/rpmfusion-free.repo ] && [ -f /etc/yum.repos.d/rpmfusion-nonfree.repo ]; then
        echo "RPM Fusion already set up..."
        echo
        echo
    else
        begin-setup "RPM Fusion"

        sudo su -c "dnf install -by --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"

        end-setup
    fi
}

function setup-coprs {
    begin-setup "coprs"

    sudo dnf copr enable -y fabiand/rust-binary
    sudo dnf config-manager \
         --add-repo=http://negativo17.org/repos/fedora-spotify.repo

    end-setup
}

function setup-packages {
    begin-setup "packages"

    sudo dnf groupinstall 'Development Tools'
    sudo su -c "echo $PACKAGES | xargs dnf install -by"

    end-setup
}

function setup-chrome {
    if [ "$(command -v google-chrome)" ]; then
        echo "Google Chrome already installed..."
    else
        begin-setup "Google Chrome"

        sudo su -c 'dnf install -by --nogpgcheck https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm'

        end-setup
    fi
}

function setup-config {
    begin-setup "configs"

    clone-config-dir ".config"

    safe-link "${HOME}/.config/bash/rc"      "${HOME}/.bashrc"
    safe-link "${HOME}/.config/bash/profile" "${HOME}/.bash_profile"
    safe-link "${HOME}/.config/bash/logout"  "${HOME}/.bash_logout"

    source ~/.bashrc

    end-setup
}

function setup-rpmdev {
    begin-setup "rpmdev"

    safe-link "${HOME}/.config/rpm/macros" "${HOME}/.rpmmacros"
    rpmdev-setuptree

    end-setup
}

function setup-emacs {
    begin-setup "Emacs"

    rm ~/.emacs 2> /dev/null
    clone-config-dir ".emacs.d"
    pushd "${HOME}/.emacs.d/" >/dev/null &&
        make                             &&
        popd >/dev/null

    end-setup
}

function setup-jhbuild {
    begin-setup "JHBuild paths"

    if [ ! -d /opt/gnome ]; then
        echo "Setting up install dir [/opt/gnome]..."
        echo

        sudo mkdir -m 0775 -p /opt/gnome
        sudo chown root:wheel /opt/gnome
    fi

    if [ ! -d "${HOME}/Code/gnome" ]; then
        echo "Setting up checkout dir [${HOME}/Code/gnome]..."
        echo

        mkdir -p "${HOME}/Code/gnome"
    fi

    end-setup
}



####################
# Install / Update #
####################

function update-packages {
    begin-update "Packages"

    sudo su -c "echo $PACKAGES | xargs dnf install -by"

    end-update
}

function update-npm-packages {
    begin-update "NPM packages"

    npm install -g                      \
        grunt-cli                       \
        jshint                          \
        jscs                            \
        jake                            \
        http-server                     \
        yasel                           \
        2> /dev/null

    end-update
}

function update-lua-packages {
    begin-update "Lua packages"

    luarocks install luacheck

    end-update
}

function update-python-packages {
    begin-update "Python packages"

    pip install --upgrade --user        \
        git-spindle                     \
        scan-build

    end-update
}

function update-go-packages {
    begin-update "go packages"

    go get github.com/nsf/gocode
    go get github.com/dougm/goflymake
    go get github.com/rogpeppe/godef
    go get github.com/monochromegane/the_platinum_searcher/...

    end-update
}

function update-emacs {
    begin-update "Emacs"

    pushd "${HOME}/.emacs.d/" >/dev/null &&
        make update                      &&
        popd

    end-update
}

function update-git-fpaste {
    begin-update "git-fpaste"

    gh-clone "${GH_USERNAME}" "git-fpaste" "${HOME}/Code/Projects/git-fpaste/" && make user-install

    end-update
}

function update-bash-completions {
    begin-update "bash completion"

    local LAZY_PATH="${PREFIX}/share/bash-completion/completions/"
    local LOAD_PATH="${CONFIG}/bash_completion.d/"
    mkdir -p "${LAZY_PATH}"
    mkdir -p "${LOAD_PATH}"

    gh-clone "ekalinin" "pip-bash-completion" &&
        cp pip "${LAZY_PATH}" &&
        cd

    gh-clone "seveas" "git-spindle" &&
        cp completion/git-spindle.completion.bash "${LOAD_PATH}" &&
        cd

    [ "$(command -v npm)" ] && npm completion > "${LAZY_PATH}/npm"

    end-update
}

function update-jhbuild {
    begin-update "JHBuild"

    git-clone https://git.gnome.org/browse/jhbuild "${HOME}/Code/gnome/jhbuild"
    ./autogen.sh --prefix="$PREFIX/" && make && make install
    echo
    echo "Updating JHBuild sysdeps..."
    jhbuild sysdeps --install

    end-update
}

function update-config {
    pushd "${HOME}/.config/" >/dev/null &&
        git pull --rebase		&&
        popd >/dev/null
}

function update-rtags {
    local FORCE_UPDATE="${1}"
    if [ "$(command -v rdm)" ] && [ -z "${FORCE_UPDATE}" ]; then
        echo "RTags already installed. Skipping..."
        echo
        echo
    else
        begin-update "RTags"

        gh-clone "Andersbakken" "rtags"
        mkcd build
        cmake -DCMAKE_INSTALL_PREFIX:PATH="${PREFIX}/" .. && \
            make -j "$(nproc)"                            && \
            make install
        cd "${HOME}"
        if [ ! -x "${HOME}/.local/bin/gcc-rtags-wrapper.sh" ]; then
            echo "Installing GCC wrapper symlinks..."
            install -m 755 "${HOME}/Code/github/rtags/bin/gcc-rtags-wrapper.sh" ~/.local/bin/
            for COMP in "gcc" "c++" "cc" "g++"; do
                safe-link-bin "${HOME}/.local/bin/gcc-rtags-wrapper.sh" "$COMP";
            done
        fi

        end-update
    fi

}

function update-jdee {
    begin-update "JDEE"

    gh-clone "jdee-emacs" "jdee-server"                 &&
        mvn assembly:assembly                           &&
        mkdir -p "${PREFIX}/share/java/"                &&
        cp target/jdee-bundle-*.jar "${PREFIX}/share/java/"

    end-update
}

function update-racer {
    local FORCE_UPDATE="${1}"
    if [ "$(command -v racer)" ] && [ -z "${FORCE_UPDATE}" ]; then
        echo "Racer already installed..."
        echo
        echo
    else
        begin-update "Racer"

        gh-clone "rust-lang" "rust"         && \
            gh-clone "phildawes" "racer"    && \
            cargo build --release           && \
            install -m 755 target/release/racer "${PREFIX}/bin/"

        end-update
    fi
}

############
# Commands #
############

function init {
    setup-rpmfusion
    setup-coprs
    setup-packages
    setup-chrome
    setup-config
    setup-rpmdev
    setup-emacs
    setup-jhbuild
    echo
    echo "Initialization done!"
}

function update-all {
    local force
    if [[ ! -z "${1}" ]]; then
        force="yes"
    fi

    if [ "${1}" != "--all-except-pkgs" ]; then
        update-packages            "${force}"
    fi

    update-config                  "${force}"
    update-npm-packages            "${force}"
    update-lua-packages            "${force}"
    update-python-packages         "${force}"
    update-go-packages             "${force}"
    update-git-fpaste              "${force}"
    update-bash-completions        "${force}"
    update-emacs                   "${force}"
    update-jhbuild                 "${force}"
    update-rtags                   "${force}"
    update-racer                   "${force}"

    ## Currently not using
    # update-jdee                  "${force}"
}

function update-some {
    local arg
    while [[ $# -gt 0 ]] ; do
        arg="${1}"
        shift
        case "${arg}" in
            config)                  update-config                  "yes" ;;
            npm-packages)            update-npm-packages            "yes" ;;
            lua-packages)            update-lua-packages            "yes" ;;
            python-packages)         update-python-packages         "yes" ;;
            go-packages)             update-go-packages             "yes" ;;
            git-fpaste)              update-git-fpaste              "yes" ;;
            bash-completions)        update-bash-completions        "yes" ;;
            emacs)                   update-emacs                   "yes" ;;
            jhbuild)                 update-jhbuild                 "yes" ;;
            rtags)                   update-rtags                   "yes" ;;
            jdee)                    update-jdee                    "yes" ;;
            racer)                   update-racer                   "yes" ;;
            packages)                update-packages                "yes" ;;
        esac
    done
}

function update {
    if [[ $# == 0 ]]; then
        update-all
    elif [[ $# == 1 ]] && [[ "${1}" == ?(--all|--all-except-pkgs) ]]; then
        update-all "$@"
    else
        update-some "$@"
    fi
}

cmd="${1}"
shift

case "${cmd}" in
    init)    init                             ;;
    update)  update "$@"                      ;;
    install) init && update --all-except-pkgs ;;
esac
